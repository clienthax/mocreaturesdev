buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
        jcenter()        
        maven {
            name 'Sponge API repo'
            url 'https://repo.spongepowered.org/maven'
        }
        maven {
            name = 'forge'
            url = 'https://maven.minecraftforge.net/'
        }
        maven {
            name = 'oss-sonatype-public'
            url = 'https://oss.sonatype.org/content/repositories/public/'
        }
        maven {
            url = 'https://plugins.gradle.org/m2/'
        }
        flatDir {
            dirs "lib"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
        classpath 'gradle.plugin.nl.javadude.gradle.plugins:license-gradle-plugin:0.14.0'
        classpath 'de.matthiasmann.twl:guiapi:1.3.0'
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.4'
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'com.github.hierynomus.license'
apply plugin: 'com.github.johnrengelman.shadow'

version = project.version
group = "com.almuradev.paydirtwashplant"
archivesBaseName = jarName

defaultTasks 'clean', 'licenseFormat', 'build'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

minecraft {
    version = "${project.forgeVersion}"
    runDir = "run"
    mappings = project.mcpMappings    
    useDepAts = true
    makeObfSourceJar = false
}

deobfMcMCP { failOnAtError = false }
deobfMcSRG { failOnAtError = false }

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "http://dvs1.progwml6.com/files/maven"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "modmaven.k-4u.nl"
    }
    flatDir {
        dirs "lib"
    }
}

dependencies {
    compile 'de.matthiasmann.twl:guiapi:1.3.0'
}

compileJava {
    options.compilerArgs += [
            '-Xlint:-processing',
    ]
    options.deprecation = true
    options.encoding = 'utf8'
}

license {
    ext.name = project.name
    ext.organization = project.organization
    ext.url = project.url
    header rootProject.file('License.txt')
    ignoreFailures true
    strictCheck true
    include '**/*.java'
    mapping {
        java = 'SLASHSTAR_STYLE'
    }
}

sourceSets.main {
    compileClasspath += files("lib")
    java.srcDirs "src/main/generated"
    resources.srcDirs "src/resources"
}

// Used for ShadowJar Creation
jar {
    classifier = 'original'
}

if (JavaVersion.current().isJava8Compatible() || JavaVersion.current().isJava9Compatible()) {
    tasks.withType(Javadoc) {
        // disable the crazy super-strict doclint tool in Java 8
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

compileJava {
    options.compilerArgs += [
            '-Xlint:-processing',
    ]
    options.deprecation = true
    options.encoding = 'utf8'
}

idea {
    module {
        inheritOutputDirs = true
    }
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

shadowJar {
    mainSpec.sourcePaths.clear()
    dependsOn reobfJar

    classifier ''
    archiveName = "Almura-MoCreatures-1.12.2.jar"
    exclude 'dummyThing'
    relocate 'com.typesafe.config', 'configurate.typesafe.config'
    dependencies {
        include dependency('de.matthiasmann.twl:guiapi:1.3.0')
    }
    afterEvaluate {
        from zipTree(reobfJar.jar)
    }
}

artifacts {
    archives shadowJar
}
